#include "writeCSV.h"
#include "rapidcsv.h"

#ifdef HAVE_ZLIB
#include "zstr/zstr.hpp"
#endif


bool inline igl::check_ext(const std::string &path, const std::string &ext)
{
  auto idx=path.rfind('.');
  if(idx != std::string::npos)
  {
      std::string _extension = path.substr(idx+1);
      return _extension==ext;
  }
  return false;
}


template <typename Derived>
  bool igl::writeCSV(
    const std::string & csv_file, 
    const Eigen::PlainObjectBase<Derived> & M,
    const std::vector<std::string> &header
    )
{
    try 
    {
        rapidcsv::Document doc("",rapidcsv::LabelParams(0,-1));

        for(size_t i=0;i<M.rows();++i)
        {
                for(size_t j=0;j<M.cols();++j)
                    doc.template SetCell<typename Derived::Scalar>(j,i,M(i,j));

        }
        if(!header.empty())
        {
            for(size_t j=0;j<header.size();++j)
                doc.SetColumnName(j,header[j]);
        }
        
#ifdef HAVE_ZLIB
        if(igl::check_ext(csv_file,"gz")) {
            zstr::ofstream out_stream(csv_file);
            doc.Save(out_stream);
        } else 
            doc.Save(csv_file);
#else 
        doc.Save(csv_file);
#endif
        return true;
    } catch (const std::exception & e) { 
        std::cerr << "writeCSV error: " << csv_file << " " << e.what() << std::endl;
    }
    return false;
}


#ifdef IGL_STATIC_LIBRARY
// Explicit template instantiation
// generated by autoexplicit.sh
#endif
