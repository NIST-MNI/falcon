#include <test_common.h>

#include <catch2/catch.hpp>

#include <igl/png/writePNG.h>
#include <igl/png/readPNG.h>


TEST_CASE("readPNG","[igl/png]")
{
    // magick -size 17x29 gradient:white-black -depth 8 test.png
    // xxd -i test.png
    static const unsigned char  image_raw_png[] = {
  0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
  0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x1d,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x69, 0xc4, 0xd8, 0x5d, 0x00, 0x00, 0x00,
  0x04, 0x67, 0x41, 0x4d, 0x41, 0x00, 0x00, 0xb1, 0x8f, 0x0b, 0xfc, 0x61,
  0x05, 0x00, 0x00, 0x00, 0x20, 0x63, 0x48, 0x52, 0x4d, 0x00, 0x00, 0x7a,
  0x26, 0x00, 0x00, 0x80, 0x84, 0x00, 0x00, 0xfa, 0x00, 0x00, 0x00, 0x80,
  0xe8, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00, 0xea, 0x60, 0x00, 0x00, 0x3a,
  0x98, 0x00, 0x00, 0x17, 0x70, 0x9c, 0xba, 0x51, 0x3c, 0x00, 0x00, 0x00,
  0x02, 0x62, 0x4b, 0x47, 0x44, 0x00, 0xff, 0x87, 0x8f, 0xcc, 0xbf, 0x00,
  0x00, 0x00, 0x07, 0x74, 0x49, 0x4d, 0x45, 0x07, 0xe5, 0x01, 0x05, 0x10,
  0x01, 0x1a, 0x78, 0xbc, 0x92, 0x58, 0x00, 0x00, 0x00, 0x21, 0x49, 0x44,
  0x41, 0x54, 0x28, 0xcf, 0x63, 0xfc, 0xcf, 0x80, 0x06, 0x58, 0xbe, 0x53,
  0x49, 0xe4, 0x1b, 0xcd, 0x4c, 0xa6, 0x9d, 0xc8, 0xe0, 0x77, 0x33, 0x59,
  0x2e, 0x64, 0xe4, 0x64, 0x20, 0x08, 0x00, 0xba, 0x56, 0x1a, 0x86, 0xef,
  0x69, 0x45, 0x49, 0x00, 0x00, 0x00, 0x25, 0x74, 0x45, 0x58, 0x74, 0x64,
  0x61, 0x74, 0x65, 0x3a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x00, 0x32,
  0x30, 0x32, 0x31, 0x2d, 0x30, 0x31, 0x2d, 0x30, 0x35, 0x54, 0x31, 0x36,
  0x3a, 0x30, 0x31, 0x3a, 0x32, 0x36, 0x2b, 0x30, 0x30, 0x3a, 0x30, 0x30,
  0x45, 0xd2, 0x38, 0xae, 0x00, 0x00, 0x00, 0x25, 0x74, 0x45, 0x58, 0x74,
  0x64, 0x61, 0x74, 0x65, 0x3a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x00,
  0x32, 0x30, 0x32, 0x31, 0x2d, 0x30, 0x31, 0x2d, 0x30, 0x35, 0x54, 0x31,
  0x36, 0x3a, 0x30, 0x31, 0x3a, 0x32, 0x36, 0x2b, 0x30, 0x30, 0x3a, 0x30,
  0x30, 0x34, 0x8f, 0x80, 0x12, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e,
  0x44, 0xae, 0x42, 0x60, 0x82
    };

    // convert -verbose test.png -depth 8 -colorspace Gray -format pgm test.pgm
    // xxd -i test.pgm # skip header
    static const unsigned char  
      ref_image_raw[] = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6,
  0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xed,
  0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed,
  0xed, 0xed, 0xed, 0xed, 0xe4, 0xe4, 0xe4, 0xe4, 0xe4, 0xe4, 0xe4, 0xe4,
  0xe4, 0xe4, 0xe4, 0xe4, 0xe4, 0xe4, 0xe4, 0xe4, 0xe4, 0xdb, 0xdb, 0xdb,
  0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb,
  0xdb, 0xdb, 0xd1, 0xd1, 0xd1, 0xd1, 0xd1, 0xd1, 0xd1, 0xd1, 0xd1, 0xd1,
  0xd1, 0xd1, 0xd1, 0xd1, 0xd1, 0xd1, 0xd1, 0xc8, 0xc8, 0xc8, 0xc8, 0xc8,
  0xc8, 0xc8, 0xc8, 0xc8, 0xc8, 0xc8, 0xc8, 0xc8, 0xc8, 0xc8, 0xc8, 0xc8,
  0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf,
  0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6,
  0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xad, 0xad,
  0xad, 0xad, 0xad, 0xad, 0xad, 0xad, 0xad, 0xad, 0xad, 0xad, 0xad, 0xad,
  0xad, 0xad, 0xad, 0xa4, 0xa4, 0xa4, 0xa4, 0xa4, 0xa4, 0xa4, 0xa4, 0xa4,
  0xa4, 0xa4, 0xa4, 0xa4, 0xa4, 0xa4, 0xa4, 0xa4, 0x9b, 0x9b, 0x9b, 0x9b,
  0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b,
  0x9b, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92,
  0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89,
  0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x80,
  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  0x80, 0x80, 0x80, 0x80, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76,
  0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x6d, 0x6d, 0x6d,
  0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d,
  0x6d, 0x6d, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64,
  0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b,
  0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b,
  0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52,
  0x52, 0x52, 0x52, 0x52, 0x52, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49,
  0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x40, 0x40,
  0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
  0x40, 0x40, 0x40, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37,
  0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x2e, 0x2e, 0x2e, 0x2e,
  0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
  0x2e, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
  0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b,
  0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x12,
  0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12,
  0x12, 0x12, 0x12, 0x12, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
  0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00
      };

    Eigen::Matrix<unsigned char,Eigen::Dynamic,Eigen::Dynamic> R,G,B,A;

    Eigen::Map<const Eigen::Matrix<unsigned char,Eigen::Dynamic,Eigen::Dynamic, Eigen::RowMajor > > ref_image(ref_image_raw, 29, 17) ;

    //generate file:
    FILE *out_png;
    REQUIRE((out_png=fopen("test.png","wb"))!=nullptr);
    REQUIRE(fwrite(image_raw_png,1,sizeof(image_raw_png),out_png)==sizeof(image_raw_png));
    REQUIRE(fclose(out_png)==0);


    REQUIRE(igl::png::readPNG("test.png",R,G,B,A));

    //check the size
    REQUIRE(R.rows()==17);
    REQUIRE(R.cols()==29);

    REQUIRE(G.rows()==17);
    REQUIRE(G.cols()==29);

    REQUIRE(B.rows()==17);
    REQUIRE(B.cols()==29);

    REQUIRE(A.rows()==17);
    REQUIRE(A.cols()==29);

    // check the contents, it is transposed and upside down 
    for(int i=0;i<17;++i)
        for(int j=0;j<29;++j)
        {
            REQUIRE( (unsigned int)R(i,28-j) == (unsigned int)ref_image(j,i) );
            REQUIRE( (unsigned int)G(i,28-j) == (unsigned int)ref_image(j,i) );
            REQUIRE( (unsigned int)A(i,j) == 255 );
        }
}


TEST_CASE("writePNG","[igl/png]")
{
    Eigen::Matrix<unsigned char,Eigen::Dynamic,Eigen::Dynamic> R(17,29),G(17,29),B(17,29),A(17,29);
    for(int i=0;i<17;++i)
        for(int j=0;j<29;++j)
        {
            R(i,j)=(i+j*17)%255;
            G(i,j)=(i+j*17+1)%255;
            B(i,j)=(i+j*17+2)%255;
            A(i,j)=i+j;
        }
    REQUIRE(igl::png::writePNG(R,G,B,A,"check.png"));

    // read it back
    Eigen::Matrix<unsigned char,Eigen::Dynamic,Eigen::Dynamic> _R,_G,_B,_A;
    REQUIRE(igl::png::readPNG("check.png", _R,_G,_B,_A));

    REQUIRE((A.array()==_A.array()).all());
    REQUIRE((R.array()==_R.array()).all());
    REQUIRE((G.array()==_G.array()).all());
    REQUIRE((B.array()==_B.array()).all());
}